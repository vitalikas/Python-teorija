 tuple()  # создаем пустой кортеж
 # ()

 tuple([1, 2, 3])  # преобразуем список в кортеж
# (1, 2, 3)

tuple("Строка") # преобразуем строку в кортеж
# ("C", "т", "р", "о", "к", "а")

t = ()  # создаем пустой кортеж
t = ("элемент", ) # создаем кортеж из одного элемента
t = (1, "строка", [2, 3]) # кортеж из трех элементов

# Кортежи можно создать и без обрамляющих круглых скобок
t = 42, "строковый элемент кортежа", ["44", 21] # создаем кортеж из трех элементов

t1 = (5, "Alice")  # создаем кортеж из двух элементов
t2 = (3, "Bob") # создаем еще один кортеж из двух элементов

d = {t1: 27, t2: 42} # создаем словарь из ключей t1 и t2
# d
# {(5, "Alice"): 27, (3, "Bob"): 42}
d[t1] # можем получить возраст пользователя t1
# 27

a_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) # создаем кортеж
for item in a_tuple: # итерируемся по кортежу с помощью цикла for
	print(item)
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9
# 10

len(a_tuple) # у кортежа можно узнать его длину с помощью функции len
# 10

a_tuple = tuple("Pretty long string") # Создаем кортеж из строки
a_tuple[0]  # Элемент кортежа можно получить по его индексу
# "P"

for index in range(len(a_tuple)):
   print(a_tuple[index])
# P
# r
# e
# t
# t
# y
#
# l
# o
# n
# g
#
# s
# t
# r
# i
# n
# g

import json
d = {"tuple_key": (1, 2, 3, 4)} # создаем словарь
# d  # выводим его на экран
# {"tuple_key": (1, 2, 3, 4)}
json.dumps(d) # сериализуем словарь в строку с JSON документом
# "{"tuple_key": [1, 2, 3, 4]}"

set() # создаем пустое множество
set("строка") # преобразуем строку во множество
# {"т", "к", "р", "о", "с", "а"}
set([1, 2, 3, 4, 5]) # преобразуем список во множество
# {1, 2, 3, 4, 5}
set((1, 2, 3, 4, 5)) # преобразуем кортеж во множество
# {1, 2, 3, 4, 5}
{1, 2, 3, 4, 5} # создаем множество с помощью фигурных скобок
# {1, 2, 3, 4, 5}
{"строковый элемент множества", 42, (1, 2, 3)} # множество из трех элементов
# {"строковый элемент множества", 42, (1, 2, 3)}


s = set() # создаем пустое множество
# s
set()
s.add(1) # добавляем в множество элемент 1
# s
# {1}
s.add("строка") # добавляем в множество элемент "строка"
# s
# {1, "строка"}
s.add(1) # добавляем во множество уже существующий элемент
# s
# {1, "строка"}


basket = {
    "Alice": ["banana", "apple", "milk", "coffee"],
    "Bob": ["meat", "milk", "corn flakes"],
    "Nick": ["fish", "orange juice", "muffin"]
}
products_list = []  # создаем пустой список продуктов
for products in basket.values():  # итерируемся по всем покупкам
	for product in products: # каждый элемент списка покупок очередного пользователя
		products_list.append(product)  # добавляем в общий список

products_list
# ["banana", "apple", "milk", "coffee", "meat", "milk", "corn flakes", "fish", "orange juice", "muffin"]
len(products_list) # у нас получился список из 10 позиций
# 10
# В получившемся списке продуктов есть повторения, избавимся от них с помощью множества:
unique_products_list = set(products_list)
# {"milk", "coffee", "banana", "corn flakes", "orange juice", "meat", "fish", "muffin", "apple"}
# len(unique_products_list)
# 9
# или
products_list = set() # Сразу создаем множество, тем самым гарантируя уникальность элементов
for products in basket.values():  # итерируемся по всем покупкам
	for product in products: # каждый элемент списка покупок очередного пользователя
		products_list.add(product)  # пользуемся методом add для добавления очередного элемента
products_list
# {"milk", "coffee", "banana", "corn flakes", "orange juice", "meat", "fish", "muffin", "apple"}
len(products_list)
# 9


cars_list = set(["BMW", "Mercedes", "Audi", "Honda", "Lada"]) # создаем множество производителей автомобилей
car = "Porsche" # в переменной car храним название производителя машины
car in cars_list  # с помощью оператора in проверяем принадлежит ли наша машина списку производителей cars_list
# False

car = "BMW"
car in cars_list
# True

japanese_cars = set(["Honda", "Toyota", "Subaru", "Suzuki"])  # создаем множество японских производителей автомобилей
cars_list - japanese_cars  # убираем из исходного списка автомобилей японских производителей
# {"Audi", "Mercedes", "Lada", "BMW"}

